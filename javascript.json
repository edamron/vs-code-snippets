{
	/*
	"snippet title": {
		"prefix": "",
		"description": "",
		// "body": "",
		"body": [
			"",
		],
	},
	*/
	"React Native Functional Component": {
		"prefix": "rnfc",
		"description": "A React Native functional component",
		"body": [
			"//@ts-check",
			"",
			"import React, { useState, useEffect } from 'react';",
			"import PropTypes from 'prop-types';",
			"// React Native ONLY, add other built-in elements as needed (e.g., TouchableOpacity)",
			"// import { StyleSheet, Text, View } from 'react-native';",
			"",
			"const ${1:${TM_FILENAME_BASE}} = ({ ${2:prop1Name}, ${3:prop2Name} }) => {",
			"\treturn (",
			"\t\t<View>",
			"\t\t\t$0",
			"\t\t</View>",
			"\t);",
			"};",
			"",
			"$1.propTypes = {",
			"\t$2: PropTypes.string.isRequired, // <- e.g., a required string",
			"\t$3: PropTypes.func, // <- e.g., an optional function",
			"};",
			"",
			"$1.defaultProps = {",
			"\t$2: 'some string',",
			"\t$3: () => console.log('foo'),",
			"};",
			"",
			"$1.displayName = '$1'",
			"",
			"export default $1;",
			"",
			"// examples styles...modify or remove as needed",
			"const styles = StyleSheet.create({",
			"\tcontainer: {",
			"\t\tbackgroundColor: 'white',",
			"\t\tborderColor: 'black',",
			"\t},",
			"\ttitle: {",
			"\t\tfontSize: 14,",
			"\t\tfontWeight: 'bold',",
			"\t},",
			"});",
		],
	},
	"React Native StyleSheet": {
		"prefix": "rnss",
		"description": "Import and create a React Native StyleSheet object",
		"body": [
			"import { StyleSheet } from 'react-native';",
			"const styles = StyleSheet.create({",
			"\tcontainer: {",
			"\t\tbackgroundColor: 'white',",
			"\t\tborderColor: 'black',",
			"\t},",
			"\ttitle: {",
			"\t\tfontSize: 14,",
			"\t\tfontWeight: 'bold',",
			"\t},",
			"});",
		],
	},
	"React Native Image from Asset": {
		"prefix": "rnia",
		"description": "A React Native image loaded from a local asset",
		"body": "<Image source={ require('../${1:pathToImage}/${2:imageName}.${3:imageExtension}') } />$0",
	},
	"React Native Image from URI": {
		"prefix": "rniu",
		"description": "A React Native image loaded from a web URI",
		"body": "<Image source={{ uri: '${1:imageUri}' }} />$0",
	},
	"React Native DELETE Alert": {
		"prefix": "rna",
		"description": "A React Native 'Delete' alert",
		"body": [
			"Alert.alert(",
			"\t'${1:alertTitle}?',",
			"\t'${2:deleteQuestion}?',",
			"\t[",
			"\t\t{",
			"\t\t\ttext: '${3:Cancel}',",
			"\t\t\tstyle: 'cancel',",
			"\t\t},",
			"\t\t{",
			"\t\t\ttext: '${4:Delete}',",
			"\t\t\tstyle: 'destructive',",
			"\t\t\tonPress: () => {",
			"\t\t\t\t$0",
			"\t\t\t},",
			"\t\t},",
			"\t],",
			");",
		],
	},
	"React conditionally-rendered component": {
		"prefix": "rcr",
		"description": "Shell for conditionally rendering a React component",
		"body": [
			"{${1:condition} && (",
			"\t<${2:component} $0 />",
			")}",
		],
	},
	"React conditional 'if / else' render": {
		"prefix": "rcr_ie",
		"description": "React conditional 'if / else' render",
		"body": [
			"{true ? (",
			"\t<p>when true</p>",
			") : (",
			"\t<p>when false</p>",
			")}",
		],
	},
	"React Native TouchableOpacity": {
		"prefix": "rnto",
		"description": "A React Native TouchableOpacity with style, onPress, and text",
		"body": [
			"<TouchableOpacity",
			"\tstyle={styles.${1:styleName}}",
			"\tonPress={${2:onPressHandler}}",
			">",
			"\t<Text>${3:textToShow}</Text>",
			"</TouchableOpacity>$0",
		],
	},
	"ES6 Function Declaration": {
		"prefix": "fn",
		"description": "A bare-bones ES6 function declaration",
		"body": [
			"const ${1:funcName} = ($2) => {",
			"\t$0",
			"};",
		],
	},
	"React Native style object": {
		"prefix": "rnso",
		"description": "An example of a style object to pass to StyleSheet.create()",
		"body": [
			"${1:objName}: {",
			"\t${2:style}: ${3:value},$0",
			"},",
		],
	},
	"React useEffect w/async data load": {
		"prefix": "ruea",
		"description": "Stub useEffect that loads data asynchronously",
		"body": [
			"useEffect(() => {",
			"\t(async () => {",
			"\t\t$0",
			"\t})();",
			"}, []);",
		],
	},
	"React useEffect w/cleanup function": {
		"prefix": "ruecf",
		"description": "Stub useEffect that loads data asynchronously",
		"body": [
			"useEffect(() => {",
			"\t$0",
			"\t",
			"\treturn () => {",
			"\t\t",
			"\t};",
			"}, []);",
		],
	},
	"React useEffect w/useRef / previous value": {
		"prefix": "ruepre",
		"description": "Uses useRef to track previous useEffect value",
		"body": [
			"const usePrevious = (value) => {",
			"\tconst ref = useRef();",
			"\tuseEffect(() => {",
			"\t\tref.current = value;",
			"\t});",
			"\treturn ref.current;",
			"};",
			"// can check against prev_* variable in your useEffect callback",
			"const prev_${1:variableEffectDependsOn} = usePrevious($1);",
		],
	},
	"React useState stub": {
		"prefix": "rus",
		"description": "A declaration of an item to maintain in state with useState()",
		"body": [
			"const [${1:stateVar}, set$0$1] = useState(${2:initialState});",
		],
	},
	"knex SELECT": {
		"prefix": "knex_select",
		"description": "A basic knex SELECT statement",
		"body": [
			"exports.${1:tableName}All = async (req, res) => {",
			"knex.select('${2:*}')",
			"\t\t.from('$1')",
			"\t\t.then((${3:data}) => {",
			"\t\t\tres.json($3);",
			"\t\t})",
			"\t\t.catch((${4:err}) => {",
			"\t\t\tres.json({ message: `Error retrieving rows from table '$1': ${$4}` });",
			"\t\t})",
			"};",
			"",
		],
	},
	"knex INSERT": {
		"prefix": "knex_insert",
		"description": "A basic knex INSERT statement",
		"body": [
			"exports.${1:tableName}Create = async (req, res) => {",
			"\tknex('$1')",
			"\t\t.insert({",
			"\t\t\t'${2:key1}': req.body.$2,",
			"\t\t\t'${3:key2}': req.body.$3,",
			"\t\t})",
			"\t\t.then(() => {",
			"\t\t\tres.json({ message: '$1 row created successfully' });",
			"\t\t})",
			"\t\t.catch(err => {",
			"\t\t\tres.json({ message: `Error inserting to table $1: \\${err\\}` });",
			"\t\t})",
			"};",
		],
	},
	"node.js requre": {
		"prefix": "req",
		"description": "A basic node.js 'const ... = require( ... )' statement",
		"body": [
			"const ${1:what?} = require('$0');"
		],
	},
	"Axios GET": {
		"prefix": "axios_get",
		"description": "axios get",
		"body": [
			"const url = '${1:url}';",
			"axios",
			"\t.get(url)",
			"\t.then(res => {",
			"\t\t$0",
			"\t})",
			"\t.catch(err => {",
			"\t\tconsole.log(`Error getting '\\${url\\}': \\${err\\}`);",
			"\t})",
		],
	},
	"Express GET route": {
		"prefix": "exp_get",
		"description": "Express GET route",
		"body": [
			"router.get('/', (req, res) => {",
			"\tres.json({ a: 'a', b: 99, c: false });",
			"});",
		],
	},
	"PropType of TypeScript object": {
		"prefix": "proptype_object",
		"description": "Declaration of a PropType of an object",
		"body": [
			"// need this import",
			"//import PropTypes from 'prop-types';",
			"${1:${TM_FILENAME_BASE}}.PropTypes = {",
			"\t${2:propName}: PropTypes.shape({",
			"\t\t${3:key1Name}: PropTypes.${4:key1Type}.isRequired,",
			"\t\t${5:key2Name}: PropTypes.${6:key2Type}.isRequired,",
			"\t}).isRequired,$0",
			"};",
		],
	},
	"PropType of TypeScript array of objects": {
		"prefix": "proptype_arrayOf_object",
		"description": "Declaration of a PropType of an array of object",
		"body": [
			"// for more info, see https://reactjs.org/docs/typechecking-with-proptypes.html",
			"// need this import",
			"//import PropTypes from 'prop-types';",
			"${1:${TM_FILENAME_BASE}}.PropTypes = {",
			"\t${2:propName}: PropTypes.arrayOf(",
			"\t\tPropTypes.shape({",
			"\t\t\t${3:key1Name}: PropTypes.${4:key1Type}.isRequired,",
			"\t\t\t${5:key2Name}: PropTypes.${6:key2Type}.isRequired,",
			"\t\t})",
			"\t).isRequired,$0",
			"};",
		],
	},
	"console.log()": {
		"prefix": "clog",
		"description": "console.log(...)",
		"body": "console.log('${1:what?}');$0",
	},
	/*
	"snippet title": {
		"prefix": "",
		"description": "",
		// "body": "",
		"body": [
			"",
		],
	},
	*/
}